#summary A simple tutorial for writing and compiling JNI code for the Android platform
#sidebar TableOfContents
= Introduction =

Here we'll go through the steps of writing your own JNI library to use with the Android platform. We'll also touch on setting up your Android app editing environment using Eclipse.

<wiki:toc max_depth="5" />

= Overview =

Before you create your Android JNI file you need a working project, and before that you need a working development environment. In this tutorial we'll briefly cover setting up your eclipse IDE for java development, and we'll go on to cover Android JNI/NDK.

JNI stands for 'Java Native Interface' and NDK stands for 'Native Development Kit'. We'll use the two terms somewhat interchangeably but they could also be used to define very specific and different things. JNI could be used to define all Java applications that use native code, whereas NDK would be more related to the Android system in specific.

=Setup Environment=

Here we'll start looking at Eclipse and Android plugins. Awesomeguy was programmed on a debian-based linux computer. Instructions for installing software are generally written with a linux operating system in mind. However, Android apps can be successfully written on Windows computers, and all of the tools mentioned here have windows equivalents.

===File Folder Organization===

If you're using linux, all your data should be kept in your home directory. You _can_ put things in your Desktop directory, but it's not encouraged. The linux setup that the author uses includes a 'bin' directory in the 'home' directory. All the development tools and folders were placed there. This lessened the clutter of the 'home' directory. Also, the author used the 'bash' command interpreter. The '.bashrc' file was edited so that a PATH variable included the user's 'bin' directory. This way scripts could be written that automated difficult tasks. The scripts were placed in the user's 'bin' folder, and were therefore included in the user's path. 

If you're using Windows, you should probably place downloaded packages at the root of the '`c:\`' directory. This does not apply to software that has built-in installers. Such software installs itself. Packages that don't have installers should go in '`c:\`' because then you can refer to the package on the command line easily without concern for spaces in the names of the folders or files. This is sometimes a concern if you use cigwin and mingw. Also, even if you're not concerned with spaces in your directory names, placing folders and files at the root of the '`c:\`' directory makes all references to them shorter (there is less typing involved).

===Java===

You will need a working version of Java on your computer to compile Android code. Sometimes you can run into problems if the version of Java you are using is not the official java. Oracle is the company responsible for the official java download at the time of this writing.

For distributions of linux that use complex packaging systems, java can usually be downloaded as a package. In a debian-based linux system, more than one version of Java is available. The command `update-alternatives` may be employed to make sure that the correct java implementation is being used on your system after the java packages are downloaded. 

You are interested in java 'jre' and java 'jdk', as well as anything else they require to operate correctly. Java 'jre' is the 'Java Runtime Environment' and it allows you to run Java programs. Java 'jdk' is the 'Java Development Kit' and it allows you to compile Java programs.

Java linux packages install to special directories reserved for programs and their associated files. You do not have to worry about where your system puts the Java packages as it installs them. Similarly Java Windows installers place the java software where it needs to be, and you usually don't need to worry about its location.

===Eclipse===

At the time of this writing, if you go to the Eclipse IDE web site, you'll find that the most recent version of Eclipse is 'Eclipse Helios' version 3.6.1 however that version won't work with the Android Development Kit. The link for the eclipse home page is:

http://www.eclipse.org/

The main reason for using a specific version of Eclipse is because of the compatibility with the Android development software. In the future this software will certainly be updated, so later versions of Eclipse may work for you. 

====Download Eclipse====

Go to the eclipse home page and click the button for downloads. Do not download Eclipse Helios on this page. Look for a link for 'Older Versions'. Awesomeguy was written on 'Galileo' version 3.5.2. 

For linux users the file that you download will be called something like '`eclipse-java-galileo-SR2-linux-gtk.tar.gz`'. Set the eclipse `tar.gz` package aside.

====Unpack Eclipse====

Unpacking Eclipse on a linux system can be accomplished using a gtk application like 'file-roller' or you can use the 'tar' command from the command line. We'll cover the command line option. First place the 'tar.gz' file that you downloaded in the location that you want Eclipse to actually be in. Then type the command below.

{{{
tar xvzf eclipse-java-galileo-SR2-linux-gtk.tar.gz
}}} 

You can use tab completion to make sure that you're spelling the name of the Eclipse download correctly. The 'tar' program will unpack the 'tar.gz' file and place the Eclipse folder in the current directory. After this is done you will have a directory named 'eclipse' and also the original downloaded file in your directory. You can dispose of the original download, or save it somewhere for safe keeping as you like.

If you are using Windows, unpack the eclipse folder in the '`c:\`' directory. You will want to make a shortcut on the desktop to the eclipse executable.

====Running Eclipse====

Assuming that you are still in the directory where you unpacked eclipse, and assuming the eclipse program is installed in a directory called 'eclipse', and assuming you're on a linux operating system, you can run eclipse by typing 'eclipse/eclipse' at the command line. You might want to make a launcher of some kind on your desktop, but doing so is beyond the scope of this wiki.

If you are on a Windows operating system, the name of the eclipse executable is 'eclipse.exe' and the name of the eclipse folder will vary with the exact version you've downloaded. Still, the concept for starting the executable is the same. You type some variation on the following 
{{{
c:\path\to\eclipse\eclipse.exe 
}}}

You will want to make a Desktop shortcut to the eclipse executable on Windows.

Make sure you can write and compile java code on Eclipse before moving on to the next step.

===Android SDK===

The link to the Android SDK download page is below. It is very helpful to read on line all the Android documentation possible. The 'developer.android.com' site is a source for instructions for beginners and experienced users alike.

http://developer.android.com/sdk/index.html

On the site you will find Android SDK packages for Windows, Mac, and Linux. Choose the package that's right for you.

====Download Android SDK====

The Windows package is called 'android-sdk_r07-windows.zip'. The linux package is called 'android-sdk_r07-linux_x86.tgz'. The windows package is 'zip' compressed and the linux package is 'tgz' compressed. After you have downloaded one of the packages that matches your system, set it aside for the next step.

You can also chack the MD5 check sum to see if your download completed without corrupting data. The MD5 sum is shown on the page next to the download link.

====Unpack Android SDK====

Move the compressed file to the directory where the file will reside. I put the files in the '`~/bin`' folder. Unpack with the tools provided by your operating system. In this tutorial we will use the 'tar' command. The command for unpacking the linux package is below. You can use tab completion to ensure that you are spelling the name right.

{{{
tar xvzf android-sdk_r07-linux_x86.tgz
}}}

When this is done there will be a folder named 'android-sdk-linux_x86' in your destination folder. The directory 'android-sdk-linux_x86/tools' should be added to your path at this time. This requires you edit your '.bashrc' file again. For simplicity I renamed the folder 'android-sdk-linux_x86' to 'android-sdk-linux' so that when I was editing my '.bashrc' file I had less typing to do. The lines in the '.bashrc' file look like this.
{{{
if [ -d /home/myname/bin/android-sdk-linux/tools ] ; then
    PATH=${PATH}:/home/myname/bin/android-sdk-linux/tools
fi
}}}
For a Windows setup, you might simply place the unpacked folder in the '`c:\`' location and then create a desktop shortcut to the executables in the 'tools' sub directory as needed.

====SDK And Eclipse====

Information about the Eclipse plugin for Android development can be found at the following location.

http://developer.android.com/sdk/eclipse-adt.html

Instructions on this site explain installing the Eclipse ADT for Eclipse Ganymede and Eclipse Galileo. We will focus on Galileo. The basic concept is that we need to give a URL to Eclipse so it can search for and download the proper plugin. The URL is below. Copy and Paste it into the URL field of the dialog specified.

https://dl-ssl.google.com/android/eclipse/

Note: clicking on this URL does not install the Android Eclipse plugin. The proper steps are listed below. You need internet access to perform these steps.

  # Start up Eclipse
  # Select the *Help* menu
  # From that menu select the *Install New Software* option
  # From the *Available Software* dialog click *Add...*
  # The *Add Site* dialog will appear
  # Enter a name in the *Name* field (something like 'Android Plugin')
  # Enter this URL in the *Location* field
  # Click *OK*
  # Go back to the *Available Software* dialog. You should see options for *Developer Tools*
  # Click the checkbox next to *Developer Tools*
  # Click *Next*
  # An *Install Details* dialog is displayed
  # Read Licensing Agreements and accept dependencies, ultimately installing the software.
  # Click *Next* and *Finish*

Eclipse will ultimately ask you if it can restart itself. Do this now.

===Android NDK===

====Download Android NDK====

====Unpack Android NDK====